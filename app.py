import streamlit as st
import google.generativeai as genai
from docx import Document
from io import BytesIO
import os

# --- Configuration ---
# Set Streamlit page configuration for a wider layout
st.set_page_config(layout="wide", page_title="Transcript Refiner & Formatter", page_icon="üìù")

# Get Gemini API key from environment variables (for Render.com deployment)
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# Configure the Gemini API if the key is available
if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)
else:
    st.error("Gemini API key not found. Please set the 'GEMINI_API_KEY' environment variable.")

# --- Helper Functions ---

def process_text_with_gemini(text_input, api_key):
    """
    Uses the Gemini API to reformat and clean the provided text.
    It structures the text into well-formatted paragraphs.
    """
    if not api_key:
        return "Error: Gemini API key is not configured."

    if not text_input or text_input.strip() == "":
        return "Please provide some text to process."

    try:
        model = genai.GenerativeModel('gemini-2.0-flash')
        
        # Craft a specific prompt for reformatting and cleaning
        prompt = (
            "The following text is a raw transcript or unformatted text. "
            "Please reformat it into clean, well-structured paragraphs, "
            "correcting any obvious grammatical errors or awkward phrasing. "
            "Ensure the output is easy to read and logically coherent. "
            "Maintain the original meaning and content. Do not add any introductory or concluding remarks, "
            "just the reformatted text. If the text is very short or already clean, return it as is."
            f"\n\nText to reformat:\n{text_input}"
        )
        
        response = model.generate_content(prompt)
        
        if response.candidates:
            return response.candidates[0].content.parts[0].text
        else:
            return "No refined text could be generated by Gemini."
    except Exception as e:
        st.error(f"Error communicating with Gemini API: {e}")
        return f"Error: Could not process text with Gemini. Details: {e}"

def create_word_document(text_content):
    """
    Creates a Word document (.docx) in-memory from the given text.
    """
    document = Document()
    document.add_paragraph(text_content)
    
    bio = BytesIO()
    document.save(bio)
    bio.seek(0) # Rewind the buffer to the beginning
    return bio

# --- Streamlit UI ---

# Sidebar
with st.sidebar:
    st.header("How to Use üöÄ")
    st.markdown("""
    1.  **Paste Your Transcript/Text**: Copy and paste any raw text or transcript into the text area on the main page.
    2.  **Refine**: Click the "Process Text" button. The app will send your text to the Gemini API to reformat it into clean, well-structured paragraphs.
    3.  **Review & Download**: The processed text will appear in the main area. You can easily copy it or download it as a Word document.

    **Important Note on Video Transcription**:
    This app focuses on refining *existing text* using the Gemini API.
    * **Direct video transcription from YouTube URLs or uploaded files is not supported by this app.** This is due to YouTube's IP blocking policies on cloud servers (like Render.com) for external scraping tools, and the fact that the Gemini API primarily processes text and images, not raw video files for transcription.
    * If you need a transcript from a YouTube video, you would typically use a browser extension, a dedicated website, or run the `youtube_transcript_api` script *locally* on your machine to get the raw text, and then paste that text into this app for refinement.
    """)

    st.markdown("---")
    st.header("About Us üí°")
    st.markdown("""
    This application is designed to help you quickly refine and format any raw text or transcript into clean, readable paragraphs. It leverages the powerful text processing capabilities of the Gemini API.
    """)

    st.markdown("---")
    st.header("Future Features (Placeholder) üîÆ")
    st.markdown("""
    * Summarization options for processed text.
    * Keyword extraction.
    * Multi-language translation.
    * More advanced formatting options.
    """)

# Main Content Area
st.title("üìù Text & Transcript Refiner powered by Gemini")

st.markdown("""
Welcome to the Text & Transcript Refiner! This tool helps you quickly get clean, well-formatted paragraphs from any raw text or transcript you provide. Just paste your text below, and let our app use the Gemini API to do the rest.
""")

st.markdown("---")

# Input Section
st.subheader("Input Your Raw Text or Transcript")
raw_text_input = st.text_area(
    "Paste your text here:",
    placeholder="e.g., this is a very long sentence that needs breaking up. it also has some grammatical errors that should be fixed. and maybe no proper punctuation. making it hard to read.",
    height=300
)

# Placeholder for file upload with explanation
st.file_uploader(
    "Upload a Video File (Direct Transcription Not Supported)", 
    type=["mp4", "mov", "avi", "mkv"], 
    disabled=True, 
    help="Direct video transcription via Gemini API for large files is not possible with this setup. Please use text input instead."
)

processed_transcript = None

if st.button("Process Text"):
    if not GEMINI_API_KEY:
        st.error("Cannot process text: Gemini API key is not set. Please configure it in your environment variables.")
    elif not raw_text_input or raw_text_input.strip() == "":
        st.warning("Please paste some text into the input box to process.")
    else:
        with st.spinner("Processing text with Gemini... This might take a moment."):
            processed_transcript = process_text_with_gemini(raw_text_input, GEMINI_API_KEY)
            if "Error" in processed_transcript: # Check for specific error message
                st.error(f"Failed to process text: {processed_transcript}")
                processed_transcript = None # Clear transcript on error

st.markdown("---")

# Output Section
st.subheader("Refined Text")

if processed_transcript:
    # Display the processed transcript in a text area for easy viewing and copying
    st.text_area(
        "Refined Text (copy directly from here):",
        value=processed_transcript,
        height=400,
        key="refined_output",
        help="The cleaned and reformatted text from your input."
    )

    col1, col2 = st.columns([0.15, 0.85]) # Adjust column width for button alignment

    with col1:
        # Streamlit's text_area allows easy manual copying by the user.
        st.code("To copy, select the text above and use Ctrl+C/Cmd+C.")

    with col2:
        # Download as Word button
        word_doc_buffer = create_word_document(processed_transcript)
        st.download_button(
            label="Download as Word (.docx)",
            data=word_doc_buffer,
            file_name="refined_text.docx",
            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            help="Download the refined text as a Microsoft Word document."
        )
else:
    st.info("Paste your raw text or transcript above and click 'Process Text' to see the refined output here.")


