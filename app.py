import streamlit as st
import google.generativeai as genai
from docx import Document
from io import BytesIO
import os

# --- Configuration ---
# Set Streamlit page configuration for a wider layout
st.set_page_config(layout="wide", page_title="Video Uploader & Transcript Refiner", page_icon="üìù")

# Get Gemini API key from environment variables (for Render.com deployment)
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# Configure the Gemini API if the key is available
if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)
else:
    st.error("Gemini API key not found. Please set the 'GEMINI_API_KEY' environment variable.")

# --- Helper Functions ---

def process_text_with_gemini(text_input, api_key):
    """
    Uses the Gemini API to reformat and clean the provided text.
    It structures the text into well-formatted paragraphs.
    """
    if not api_key:
        return "Error: Gemini API key is not configured."

    if not text_input or text_input.strip() == "":
        return "Please provide some text to process."

    try:
        model = genai.GenerativeModel('gemini-2.0-flash')
        
        # Craft a specific prompt for reformatting and cleaning
        prompt = (
            "The following text is a raw transcript or unformatted text. "
            "Please reformat it into clean, well-structured paragraphs, "
            "correcting any obvious grammatical errors or awkward phrasing. "
            "Ensure the output is easy to read and logically coherent. "
            "Maintain the original meaning and content. Do not add any introductory or concluding remarks, "
            "just the reformatted text. If the text is very short or already clean, return it as is."
            f"\n\nText to reformat:\n{text_input}"
        )
        
        response = model.generate_content(prompt)
        
        if response.candidates:
            return response.candidates[0].content.parts[0].text
        else:
            return "No refined text could be generated by Gemini."
    except Exception as e:
        st.error(f"Error communicating with Gemini API: {e}")
        return f"Error: Could not process text with Gemini. Details: {e}"

def create_word_document(text_content):
    """
    Creates a Word document (.docx) in-memory from the given text.
    """
    document = Document()
    document.add_paragraph(text_content)
    
    bio = BytesIO()
    document.save(bio)
    bio.seek(0) # Rewind the buffer to the beginning
    return bio

# --- Streamlit UI ---

# Sidebar
with st.sidebar:
    st.header("How to Use üöÄ")
    st.markdown("""
    1.  **Upload a Video File**: Select and upload your video file (up to 15 minutes duration).
    2.  **Manual Transcript Input**: Since this app cannot directly transcribe video audio, you'll need to manually paste the raw transcript (obtained from another tool) into the text area that appears.
    3.  **Refine Text**: Click the "Refine Pasted Transcript" button. The app will use the Gemini API to reformat the pasted text into clean, well-structured paragraphs.
    4.  **Review & Download**: The processed text will appear in the main area. You can copy it or download it as a Word document.
    """)

    st.markdown("---")
    st.header("About Us üí°")
    st.markdown("""
    This application allows you to upload video files and then refine their manually provided transcripts. It leverages the powerful text processing capabilities of the Gemini API to format raw text into clean, readable paragraphs.
    """)

    st.markdown("---")
    st.header("Future Features (Placeholder) üîÆ")
    st.markdown("""
    * Integration with external audio transcription services (requires additional API keys/services).
    * Summarization options for transcripts.
    * Keyword extraction.
    * Multi-language translation.
    """)

# Main Content Area
st.title("‚¨ÜÔ∏è Video Uploader & Transcript Refiner")

st.markdown("""
Welcome! Upload your video file, and then paste its raw transcript into the provided text area. Our app will use the Gemini API to refine and format that transcript into clean, well-structured paragraphs.
""")

st.markdown("---")

# Input Section
st.subheader("1. Upload Your Video File")

uploaded_file = st.file_uploader(
    "Choose a video file (Max Duration: 15 minutes)", 
    type=["mp4", "mov", "avi", "mkv"],
    help="Upload your video here. Note: This app does NOT transcribe audio from the video directly. See step 2."
)

raw_transcript_text = ""
if uploaded_file is not None:
    st.success(f"Video '{uploaded_file.name}' uploaded successfully. Now proceed to Step 2.")
    # In a real application, you might save this file temporarily or pass it to a background service.
    # For this app, we simply acknowledge the upload and proceed to manual text input.
    
    st.markdown("---")
    st.subheader("2. Paste Your Raw Transcript Below")
    st.warning(
        "**Important:** This app does not have built-in video audio transcription. "
        "Please obtain your video's raw transcript using another service or method, "
        "and paste it into the text box below. Gemini will then refine THIS pasted text."
    )
    raw_transcript_text = st.text_area(
        "Paste the raw transcript here:",
        placeholder="e.g., this is a very long sentence that needs breaking up. it also has some grammatical errors that should be fixed. and maybe no proper punctuation. making it hard to read.",
        height=300,
        key="raw_transcript_input"
    )

processed_transcript = None

if st.button("Refine Pasted Transcript"):
    if not GEMINI_API_KEY:
        st.error("Cannot process text: Gemini API key is not set. Please configure it in your environment variables.")
    elif not uploaded_file:
        st.warning("Please upload a video file first.")
    elif not raw_transcript_text or raw_transcript_text.strip() == "":
        st.warning("Please paste the raw transcript into the text area before refining.")
    else:
        with st.spinner("Refining pasted transcript with Gemini... This might take a moment."):
            processed_transcript = process_text_with_gemini(raw_transcript_text, GEMINI_API_KEY)
            if "Error" in processed_transcript: # Check for specific error message
                st.error(f"Failed to process text: {processed_transcript}")
                processed_transcript = None # Clear transcript on error

st.markdown("---")

# Output Section
st.subheader("Refined Transcript Output")

if processed_transcript:
    # Display the processed transcript in a text area for easy viewing and copying
    st.text_area(
        "Refined Transcript (copy directly from here):",
        value=processed_transcript,
        height=400,
        key="refined_output",
        help="The cleaned and reformatted transcript from your pasted input."
    )

    col1, col2 = st.columns([0.15, 0.85]) # Adjust column width for button alignment

    with col1:
        # Streamlit's text_area allows easy manual copying by the user.
        st.code("To copy, select the text above and use Ctrl+C/Cmd+C.")

    with col2:
        # Download as Word button
        word_doc_buffer = create_word_document(processed_transcript)
        st.download_button(
            label="Download as Word (.docx)",
            data=word_doc_buffer,
            file_name="refined_transcript.docx",
            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            help="Download the full refined transcript as a Microsoft Word document."
        )
else:
    st.info("Upload a video and then paste its raw transcript to begin the refinement process.")


